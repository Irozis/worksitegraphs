{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fedelesh_dm\\\\worksitegraphs\\\\client\\\\src\\\\routes\\\\ObjectPage.tsx\",\n  _s = $RefreshSig$();\n// client/src/routes/ObjectPage.tsx\nimport React, { useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport useFetch from '../hooks/useFetch';\nimport ChartModal from '../components/ChartModal';\n\n// 1) Сразу объявляем эту кортеж-литералу, чтобы TypeScript знал точные значения.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst METRICS = ['voltage', 'current', 'temperature'];\n// Тип METRIC будет именно одна из трёх строк:\n\nconst ObjectPage = () => {\n  _s();\n  const {\n    objectId\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    data: object\n  } = useFetch(`/api/objects/${objectId}`);\n\n  // 2) Стейт типизируем строго под наши три метрики или null\n  const [activeMetric, setActiveMetric] = useState(null);\n  if (!object) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'Roboto',\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(-1),\n      style: {\n        marginBottom: 16\n      },\n      children: \"\\u2190 \\u041D\\u0430\\u0437\\u0430\\u0434\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontFamily: 'Roboto',\n        color: '#FFD014'\n      },\n      children: object.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontFamily: 'Roboto',\n        color: '#FFD014'\n      },\n      children: object.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        gap: 16,\n        marginTop: 24\n      },\n      children: METRICS.map(metric => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setActiveMetric(metric) // metric уже тип Metric\n        ,\n        style: {\n          flex: 1,\n          background: '#252525',\n          fontFamily: '26px Roboto bold',\n          color: '#FFD014',\n          padding: 16,\n          border: '1px solid #FFD014',\n          borderRadius: 8,\n          cursor: 'pointer',\n          position: 'relative',\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: metric === 'voltage' ? 'Напряжение' : metric === 'current' ? 'Ток' : 'Температура'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)\n      }, metric, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), activeMetric && /*#__PURE__*/_jsxDEV(ChartModal, {\n      type: activeMetric // здесь больше не будет `string`\n      ,\n      objectId: Number(objectId),\n      onClose: () => setActiveMetric(null),\n      onAlert: () => {/* ... */}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(ObjectPage, \"LGLQo2KPnWeyFre3NZHUF8SbGjQ=\", false, function () {\n  return [useParams, useNavigate, useFetch];\n});\n_c = ObjectPage;\nexport default ObjectPage;\nvar _c;\n$RefreshReg$(_c, \"ObjectPage\");","map":{"version":3,"names":["React","useState","useParams","useNavigate","useFetch","ChartModal","jsxDEV","_jsxDEV","METRICS","ObjectPage","_s","objectId","navigate","data","object","activeMetric","setActiveMetric","children","fileName","_jsxFileName","lineNumber","columnNumber","style","fontFamily","padding","onClick","marginBottom","color","name","description","display","gap","marginTop","map","metric","flex","background","border","borderRadius","cursor","position","textAlign","type","Number","onClose","onAlert","_c","$RefreshReg$"],"sources":["C:/Users/fedelesh_dm/worksitegraphs/client/src/routes/ObjectPage.tsx"],"sourcesContent":["// client/src/routes/ObjectPage.tsx\r\nimport React, { useState } from 'react';\r\nimport { useParams, useNavigate, Link } from 'react-router-dom';\r\nimport useFetch from '../hooks/useFetch';\r\nimport { ObjectItem } from '../types';\r\nimport ChartModal from '../components/ChartModal';\r\n\r\n// 1) Сразу объявляем эту кортеж-литералу, чтобы TypeScript знал точные значения.\r\nconst METRICS = ['voltage', 'current', 'temperature'] as const;\r\n// Тип METRIC будет именно одна из трёх строк:\r\ntype Metric = typeof METRICS[number];\r\n\r\ntype Params = { objectId: string };\r\n\r\nconst ObjectPage: React.FC = () => {\r\n  const { objectId } = useParams<Params>();\r\n  const navigate = useNavigate();\r\n  const { data: object } = useFetch<ObjectItem>(`/api/objects/${objectId}`);\r\n\r\n  // 2) Стейт типизируем строго под наши три метрики или null\r\n  const [activeMetric, setActiveMetric] = useState<Metric | null>(null);\r\n\r\n  if (!object) return <div>Загрузка...</div>;\r\n\r\n  return (\r\n    <div style={{ fontFamily: 'Roboto', padding: 20, }}>\r\n      <button onClick={() => navigate(-1)} style={{ marginBottom: 16 }}>← Назад</button>\r\n      <h1 style={{  fontFamily: 'Roboto' , color: '#FFD014'}}>{object.name}</h1>\r\n      <p style={{ fontFamily: 'Roboto' , color: '#FFD014'}}>{object.description}</p>\r\n\r\n      <div style={{ display: 'flex', gap: 16, marginTop: 24 }}>\r\n        {METRICS.map(metric => (\r\n          <div\r\n            key={metric}\r\n            onClick={() => setActiveMetric(metric)}  // metric уже тип Metric\r\n            style={{\r\n              flex: 1,\r\n              background: '#252525',\r\n              fontFamily: '26px Roboto bold',\r\n              color: '#FFD014',\r\n              padding: 16,\r\n              border: '1px solid #FFD014',\r\n              borderRadius: 8,\r\n              cursor: 'pointer',\r\n              position: 'relative',\r\n              textAlign: 'center'\r\n            }}\r\n          >\r\n            <h3>\r\n              {metric === 'voltage' ? 'Напряжение'\r\n               : metric === 'current' ? 'Ток'\r\n               : 'Температура'}\r\n            </h3>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* 3) Передаём в ChartModal именно Metric, а не string */}\r\n      {activeMetric && (\r\n        <ChartModal\r\n          type={activeMetric}          // здесь больше не будет `string`\r\n          objectId={Number(objectId)}\r\n          onClose={() => setActiveMetric(null)}\r\n          onAlert={() => {/* ... */}}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ObjectPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}